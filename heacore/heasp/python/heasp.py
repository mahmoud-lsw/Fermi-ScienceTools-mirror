# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _heasp
import new
new_instancemethod = new.instancemethod
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

OK = _heasp.OK
NoSuchFile = _heasp.NoSuchFile
NoData = _heasp.NoData
NoChannelData = _heasp.NoChannelData
NoStatError = _heasp.NoStatError
CannotCreate = _heasp.CannotCreate
NoEnergLo = _heasp.NoEnergLo
NoEnergHi = _heasp.NoEnergHi
NoSpecresp = _heasp.NoSpecresp
NoEboundsExt = _heasp.NoEboundsExt
NoEmin = _heasp.NoEmin
NoEmax = _heasp.NoEmax
NoMatrixExt = _heasp.NoMatrixExt
NoNgrp = _heasp.NoNgrp
NoFchan = _heasp.NoFchan
NoNchan = _heasp.NoNchan
NoMatrix = _heasp.NoMatrix
CannotCreateMatrixExt = _heasp.CannotCreateMatrixExt
CannotCreateEboundsExt = _heasp.CannotCreateEboundsExt
InconsistentGrouping = _heasp.InconsistentGrouping
class PySwigIterator:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _heasp.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return apply(_heasp.PySwigIterator_value, args)
    def incr(*args): return apply(_heasp.PySwigIterator_incr, args)
    def decr(*args): return apply(_heasp.PySwigIterator_decr, args)
    def distance(*args): return apply(_heasp.PySwigIterator_distance, args)
    def equal(*args): return apply(_heasp.PySwigIterator_equal, args)
    def copy(*args): return apply(_heasp.PySwigIterator_copy, args)
    def next(*args): return apply(_heasp.PySwigIterator_next, args)
    def previous(*args): return apply(_heasp.PySwigIterator_previous, args)
    def advance(*args): return apply(_heasp.PySwigIterator_advance, args)
    def __eq__(*args): return apply(_heasp.PySwigIterator___eq__, args)
    def __ne__(*args): return apply(_heasp.PySwigIterator___ne__, args)
    def __iadd__(*args): return apply(_heasp.PySwigIterator___iadd__, args)
    def __isub__(*args): return apply(_heasp.PySwigIterator___isub__, args)
    def __add__(*args): return apply(_heasp.PySwigIterator___add__, args)
    def __sub__(*args): return apply(_heasp.PySwigIterator___sub__, args)
    def __iter__(self): return self
PySwigIterator_swigregister = _heasp.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class IntVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return apply(_heasp.IntVector_iterator, args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return apply(_heasp.IntVector___nonzero__, args)
    def __len__(*args): return apply(_heasp.IntVector___len__, args)
    def pop(*args): return apply(_heasp.IntVector_pop, args)
    def __getslice__(*args): return apply(_heasp.IntVector___getslice__, args)
    def __setslice__(*args): return apply(_heasp.IntVector___setslice__, args)
    def __delslice__(*args): return apply(_heasp.IntVector___delslice__, args)
    def __delitem__(*args): return apply(_heasp.IntVector___delitem__, args)
    def __getitem__(*args): return apply(_heasp.IntVector___getitem__, args)
    def __setitem__(*args): return apply(_heasp.IntVector___setitem__, args)
    def append(*args): return apply(_heasp.IntVector_append, args)
    def empty(*args): return apply(_heasp.IntVector_empty, args)
    def size(*args): return apply(_heasp.IntVector_size, args)
    def clear(*args): return apply(_heasp.IntVector_clear, args)
    def swap(*args): return apply(_heasp.IntVector_swap, args)
    def get_allocator(*args): return apply(_heasp.IntVector_get_allocator, args)
    def begin(*args): return apply(_heasp.IntVector_begin, args)
    def end(*args): return apply(_heasp.IntVector_end, args)
    def rbegin(*args): return apply(_heasp.IntVector_rbegin, args)
    def rend(*args): return apply(_heasp.IntVector_rend, args)
    def pop_back(*args): return apply(_heasp.IntVector_pop_back, args)
    def erase(*args): return apply(_heasp.IntVector_erase, args)
    def __init__(self, *args): 
        this = apply(_heasp.new_IntVector, args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return apply(_heasp.IntVector_push_back, args)
    def front(*args): return apply(_heasp.IntVector_front, args)
    def back(*args): return apply(_heasp.IntVector_back, args)
    def assign(*args): return apply(_heasp.IntVector_assign, args)
    def resize(*args): return apply(_heasp.IntVector_resize, args)
    def insert(*args): return apply(_heasp.IntVector_insert, args)
    def reserve(*args): return apply(_heasp.IntVector_reserve, args)
    def capacity(*args): return apply(_heasp.IntVector_capacity, args)
    __swig_destroy__ = _heasp.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _heasp.IntVector_swigregister
IntVector_swigregister(IntVector)

class floatVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return apply(_heasp.floatVector_iterator, args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return apply(_heasp.floatVector___nonzero__, args)
    def __len__(*args): return apply(_heasp.floatVector___len__, args)
    def pop(*args): return apply(_heasp.floatVector_pop, args)
    def __getslice__(*args): return apply(_heasp.floatVector___getslice__, args)
    def __setslice__(*args): return apply(_heasp.floatVector___setslice__, args)
    def __delslice__(*args): return apply(_heasp.floatVector___delslice__, args)
    def __delitem__(*args): return apply(_heasp.floatVector___delitem__, args)
    def __getitem__(*args): return apply(_heasp.floatVector___getitem__, args)
    def __setitem__(*args): return apply(_heasp.floatVector___setitem__, args)
    def append(*args): return apply(_heasp.floatVector_append, args)
    def empty(*args): return apply(_heasp.floatVector_empty, args)
    def size(*args): return apply(_heasp.floatVector_size, args)
    def clear(*args): return apply(_heasp.floatVector_clear, args)
    def swap(*args): return apply(_heasp.floatVector_swap, args)
    def get_allocator(*args): return apply(_heasp.floatVector_get_allocator, args)
    def begin(*args): return apply(_heasp.floatVector_begin, args)
    def end(*args): return apply(_heasp.floatVector_end, args)
    def rbegin(*args): return apply(_heasp.floatVector_rbegin, args)
    def rend(*args): return apply(_heasp.floatVector_rend, args)
    def pop_back(*args): return apply(_heasp.floatVector_pop_back, args)
    def erase(*args): return apply(_heasp.floatVector_erase, args)
    def __init__(self, *args): 
        this = apply(_heasp.new_floatVector, args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return apply(_heasp.floatVector_push_back, args)
    def front(*args): return apply(_heasp.floatVector_front, args)
    def back(*args): return apply(_heasp.floatVector_back, args)
    def assign(*args): return apply(_heasp.floatVector_assign, args)
    def resize(*args): return apply(_heasp.floatVector_resize, args)
    def insert(*args): return apply(_heasp.floatVector_insert, args)
    def reserve(*args): return apply(_heasp.floatVector_reserve, args)
    def capacity(*args): return apply(_heasp.floatVector_capacity, args)
    __swig_destroy__ = _heasp.delete_floatVector
    __del__ = lambda self : None;
floatVector_swigregister = _heasp.floatVector_swigregister
floatVector_swigregister(floatVector)

class pha:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pha, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pha, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FirstChannel"] = _heasp.pha_FirstChannel_set
    __swig_getmethods__["FirstChannel"] = _heasp.pha_FirstChannel_get
    __swig_setmethods__["Pha"] = _heasp.pha_Pha_set
    __swig_getmethods__["Pha"] = _heasp.pha_Pha_get
    __swig_setmethods__["StatError"] = _heasp.pha_StatError_set
    __swig_getmethods__["StatError"] = _heasp.pha_StatError_get
    __swig_setmethods__["SysError"] = _heasp.pha_SysError_set
    __swig_getmethods__["SysError"] = _heasp.pha_SysError_get
    __swig_setmethods__["Channel"] = _heasp.pha_Channel_set
    __swig_getmethods__["Channel"] = _heasp.pha_Channel_get
    __swig_setmethods__["Quality"] = _heasp.pha_Quality_set
    __swig_getmethods__["Quality"] = _heasp.pha_Quality_get
    __swig_setmethods__["Group"] = _heasp.pha_Group_set
    __swig_getmethods__["Group"] = _heasp.pha_Group_get
    __swig_setmethods__["AreaScaling"] = _heasp.pha_AreaScaling_set
    __swig_getmethods__["AreaScaling"] = _heasp.pha_AreaScaling_get
    __swig_setmethods__["BackScaling"] = _heasp.pha_BackScaling_set
    __swig_getmethods__["BackScaling"] = _heasp.pha_BackScaling_get
    __swig_setmethods__["Exposure"] = _heasp.pha_Exposure_set
    __swig_getmethods__["Exposure"] = _heasp.pha_Exposure_get
    __swig_setmethods__["CorrectionScaling"] = _heasp.pha_CorrectionScaling_set
    __swig_getmethods__["CorrectionScaling"] = _heasp.pha_CorrectionScaling_get
    __swig_setmethods__["DetChans"] = _heasp.pha_DetChans_set
    __swig_getmethods__["DetChans"] = _heasp.pha_DetChans_get
    __swig_setmethods__["Poisserr"] = _heasp.pha_Poisserr_set
    __swig_getmethods__["Poisserr"] = _heasp.pha_Poisserr_get
    __swig_setmethods__["Datatype"] = _heasp.pha_Datatype_set
    __swig_getmethods__["Datatype"] = _heasp.pha_Datatype_get
    __swig_setmethods__["PHAVersion"] = _heasp.pha_PHAVersion_set
    __swig_getmethods__["PHAVersion"] = _heasp.pha_PHAVersion_get
    __swig_setmethods__["Spectrumtype"] = _heasp.pha_Spectrumtype_set
    __swig_getmethods__["Spectrumtype"] = _heasp.pha_Spectrumtype_get
    __swig_setmethods__["ResponseFile"] = _heasp.pha_ResponseFile_set
    __swig_getmethods__["ResponseFile"] = _heasp.pha_ResponseFile_get
    __swig_setmethods__["AncillaryFile"] = _heasp.pha_AncillaryFile_set
    __swig_getmethods__["AncillaryFile"] = _heasp.pha_AncillaryFile_get
    __swig_setmethods__["BackgroundFile"] = _heasp.pha_BackgroundFile_set
    __swig_getmethods__["BackgroundFile"] = _heasp.pha_BackgroundFile_get
    __swig_setmethods__["CorrectionFile"] = _heasp.pha_CorrectionFile_set
    __swig_getmethods__["CorrectionFile"] = _heasp.pha_CorrectionFile_get
    __swig_setmethods__["ChannelType"] = _heasp.pha_ChannelType_set
    __swig_getmethods__["ChannelType"] = _heasp.pha_ChannelType_get
    __swig_setmethods__["Telescope"] = _heasp.pha_Telescope_set
    __swig_getmethods__["Telescope"] = _heasp.pha_Telescope_get
    __swig_setmethods__["Instrument"] = _heasp.pha_Instrument_set
    __swig_getmethods__["Instrument"] = _heasp.pha_Instrument_get
    __swig_setmethods__["Detector"] = _heasp.pha_Detector_set
    __swig_getmethods__["Detector"] = _heasp.pha_Detector_get
    __swig_setmethods__["Filter"] = _heasp.pha_Filter_set
    __swig_getmethods__["Filter"] = _heasp.pha_Filter_get
    __swig_setmethods__["Datamode"] = _heasp.pha_Datamode_set
    __swig_getmethods__["Datamode"] = _heasp.pha_Datamode_get
    __swig_setmethods__["XSPECFilter"] = _heasp.pha_XSPECFilter_set
    __swig_getmethods__["XSPECFilter"] = _heasp.pha_XSPECFilter_get
    def __init__(self, *args): 
        this = apply(_heasp.new_pha, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_pha
    __del__ = lambda self : None;
    def read(*args): return apply(_heasp.pha_read, args)
    def NumberChannels(*args): return apply(_heasp.pha_NumberChannels, args)
    def disp(*args): return apply(_heasp.pha_disp, args)
    def clear(*args): return apply(_heasp.pha_clear, args)
    def check(*args): return apply(_heasp.pha_check, args)
    def write(*args): return apply(_heasp.pha_write, args)
    def setGrouping(*args): return apply(_heasp.pha_setGrouping, args)
    def rebinChannels(*args): return apply(_heasp.pha_rebinChannels, args)
pha_swigregister = _heasp.pha_swigregister
pha_swigregister(pha)

PHAtype = _heasp.PHAtype
IsPHAcounts = _heasp.IsPHAcounts
NumberofSpectra = _heasp.NumberofSpectra
class phaII:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, phaII, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, phaII, name)
    __repr__ = _swig_repr
    __swig_setmethods__["phas"] = _heasp.phaII_phas_set
    __swig_getmethods__["phas"] = _heasp.phaII_phas_get
    def __init__(self, *args): 
        this = apply(_heasp.new_phaII, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_phaII
    __del__ = lambda self : None;
    def read(*args): return apply(_heasp.phaII_read, args)
    def get(*args): return apply(_heasp.phaII_get, args)
    def push(*args): return apply(_heasp.phaII_push, args)
    def NumberSpectra(*args): return apply(_heasp.phaII_NumberSpectra, args)
    def disp(*args): return apply(_heasp.phaII_disp, args)
    def clear(*args): return apply(_heasp.phaII_clear, args)
    def check(*args): return apply(_heasp.phaII_check, args)
    def write(*args): return apply(_heasp.phaII_write, args)
phaII_swigregister = _heasp.phaII_swigregister
phaII_swigregister(phaII)

class rmf:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rmf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rmf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FirstChannel"] = _heasp.rmf_FirstChannel_set
    __swig_getmethods__["FirstChannel"] = _heasp.rmf_FirstChannel_get
    __swig_setmethods__["NumberGroups"] = _heasp.rmf_NumberGroups_set
    __swig_getmethods__["NumberGroups"] = _heasp.rmf_NumberGroups_get
    __swig_setmethods__["FirstGroup"] = _heasp.rmf_FirstGroup_set
    __swig_getmethods__["FirstGroup"] = _heasp.rmf_FirstGroup_get
    __swig_setmethods__["FirstChannelGroup"] = _heasp.rmf_FirstChannelGroup_set
    __swig_getmethods__["FirstChannelGroup"] = _heasp.rmf_FirstChannelGroup_get
    __swig_setmethods__["NumberChannelsGroup"] = _heasp.rmf_NumberChannelsGroup_set
    __swig_getmethods__["NumberChannelsGroup"] = _heasp.rmf_NumberChannelsGroup_get
    __swig_setmethods__["FirstElement"] = _heasp.rmf_FirstElement_set
    __swig_getmethods__["FirstElement"] = _heasp.rmf_FirstElement_get
    __swig_setmethods__["OrderGroup"] = _heasp.rmf_OrderGroup_set
    __swig_getmethods__["OrderGroup"] = _heasp.rmf_OrderGroup_get
    __swig_setmethods__["LowEnergy"] = _heasp.rmf_LowEnergy_set
    __swig_getmethods__["LowEnergy"] = _heasp.rmf_LowEnergy_get
    __swig_setmethods__["HighEnergy"] = _heasp.rmf_HighEnergy_set
    __swig_getmethods__["HighEnergy"] = _heasp.rmf_HighEnergy_get
    __swig_setmethods__["Matrix"] = _heasp.rmf_Matrix_set
    __swig_getmethods__["Matrix"] = _heasp.rmf_Matrix_get
    __swig_setmethods__["ChannelLowEnergy"] = _heasp.rmf_ChannelLowEnergy_set
    __swig_getmethods__["ChannelLowEnergy"] = _heasp.rmf_ChannelLowEnergy_get
    __swig_setmethods__["ChannelHighEnergy"] = _heasp.rmf_ChannelHighEnergy_set
    __swig_getmethods__["ChannelHighEnergy"] = _heasp.rmf_ChannelHighEnergy_get
    __swig_setmethods__["AreaScaling"] = _heasp.rmf_AreaScaling_set
    __swig_getmethods__["AreaScaling"] = _heasp.rmf_AreaScaling_get
    __swig_setmethods__["ResponseThreshold"] = _heasp.rmf_ResponseThreshold_set
    __swig_getmethods__["ResponseThreshold"] = _heasp.rmf_ResponseThreshold_get
    __swig_setmethods__["ChannelType"] = _heasp.rmf_ChannelType_set
    __swig_getmethods__["ChannelType"] = _heasp.rmf_ChannelType_get
    __swig_setmethods__["RMFVersion"] = _heasp.rmf_RMFVersion_set
    __swig_getmethods__["RMFVersion"] = _heasp.rmf_RMFVersion_get
    __swig_setmethods__["EBDVersion"] = _heasp.rmf_EBDVersion_set
    __swig_getmethods__["EBDVersion"] = _heasp.rmf_EBDVersion_get
    __swig_setmethods__["Telescope"] = _heasp.rmf_Telescope_set
    __swig_getmethods__["Telescope"] = _heasp.rmf_Telescope_get
    __swig_setmethods__["Instrument"] = _heasp.rmf_Instrument_set
    __swig_getmethods__["Instrument"] = _heasp.rmf_Instrument_get
    __swig_setmethods__["Detector"] = _heasp.rmf_Detector_set
    __swig_getmethods__["Detector"] = _heasp.rmf_Detector_get
    __swig_setmethods__["Filter"] = _heasp.rmf_Filter_set
    __swig_getmethods__["Filter"] = _heasp.rmf_Filter_get
    __swig_setmethods__["RMFType"] = _heasp.rmf_RMFType_set
    __swig_getmethods__["RMFType"] = _heasp.rmf_RMFType_get
    __swig_setmethods__["RMFExtensionName"] = _heasp.rmf_RMFExtensionName_set
    __swig_getmethods__["RMFExtensionName"] = _heasp.rmf_RMFExtensionName_get
    __swig_setmethods__["EBDExtensionName"] = _heasp.rmf_EBDExtensionName_set
    __swig_getmethods__["EBDExtensionName"] = _heasp.rmf_EBDExtensionName_get
    def __init__(self, *args): 
        this = apply(_heasp.new_rmf, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_rmf
    __del__ = lambda self : None;
    def read(*args): return apply(_heasp.rmf_read, args)
    def readMatrix(*args): return apply(_heasp.rmf_readMatrix, args)
    def readChannelBounds(*args): return apply(_heasp.rmf_readChannelBounds, args)
    def update(*args): return apply(_heasp.rmf_update, args)
    def NumberChannels(*args): return apply(_heasp.rmf_NumberChannels, args)
    def NumberEnergyBins(*args): return apply(_heasp.rmf_NumberEnergyBins, args)
    def NumberTotalGroups(*args): return apply(_heasp.rmf_NumberTotalGroups, args)
    def NumberTotalElements(*args): return apply(_heasp.rmf_NumberTotalElements, args)
    def ElementValue(*args): return apply(_heasp.rmf_ElementValue, args)
    def RowValues(*args): return apply(_heasp.rmf_RowValues, args)
    def RandomChannels(*args): return apply(_heasp.rmf_RandomChannels, args)
    def disp(*args): return apply(_heasp.rmf_disp, args)
    def clear(*args): return apply(_heasp.rmf_clear, args)
    def check(*args): return apply(_heasp.rmf_check, args)
    def normalize(*args): return apply(_heasp.rmf_normalize, args)
    def compress(*args): return apply(_heasp.rmf_compress, args)
    def rebinChannels(*args): return apply(_heasp.rmf_rebinChannels, args)
    def rebinEnergies(*args): return apply(_heasp.rmf_rebinEnergies, args)
    def write(*args): return apply(_heasp.rmf_write, args)
    def writeMatrix(*args): return apply(_heasp.rmf_writeMatrix, args)
    def writeChannelBounds(*args): return apply(_heasp.rmf_writeChannelBounds, args)
    def __imul__(*args): return apply(_heasp.rmf___imul__, args)
    def __iadd__(*args): return apply(_heasp.rmf___iadd__, args)
    def checkCompatibility(*args): return apply(_heasp.rmf_checkCompatibility, args)
rmf_swigregister = _heasp.rmf_swigregister
rmf_swigregister(rmf)

compressLine = _heasp.compressLine
class rmft:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rmft, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rmft, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FirstChannel"] = _heasp.rmft_FirstChannel_set
    __swig_getmethods__["FirstChannel"] = _heasp.rmft_FirstChannel_get
    __swig_setmethods__["NumberGroups"] = _heasp.rmft_NumberGroups_set
    __swig_getmethods__["NumberGroups"] = _heasp.rmft_NumberGroups_get
    __swig_setmethods__["FirstGroup"] = _heasp.rmft_FirstGroup_set
    __swig_getmethods__["FirstGroup"] = _heasp.rmft_FirstGroup_get
    __swig_setmethods__["FirstEnergyGroup"] = _heasp.rmft_FirstEnergyGroup_set
    __swig_getmethods__["FirstEnergyGroup"] = _heasp.rmft_FirstEnergyGroup_get
    __swig_setmethods__["NumberEnergiesGroup"] = _heasp.rmft_NumberEnergiesGroup_set
    __swig_getmethods__["NumberEnergiesGroup"] = _heasp.rmft_NumberEnergiesGroup_get
    __swig_setmethods__["FirstElement"] = _heasp.rmft_FirstElement_set
    __swig_getmethods__["FirstElement"] = _heasp.rmft_FirstElement_get
    __swig_setmethods__["OrderGroup"] = _heasp.rmft_OrderGroup_set
    __swig_getmethods__["OrderGroup"] = _heasp.rmft_OrderGroup_get
    __swig_setmethods__["LowEnergy"] = _heasp.rmft_LowEnergy_set
    __swig_getmethods__["LowEnergy"] = _heasp.rmft_LowEnergy_get
    __swig_setmethods__["HighEnergy"] = _heasp.rmft_HighEnergy_set
    __swig_getmethods__["HighEnergy"] = _heasp.rmft_HighEnergy_get
    __swig_setmethods__["Matrix"] = _heasp.rmft_Matrix_set
    __swig_getmethods__["Matrix"] = _heasp.rmft_Matrix_get
    __swig_setmethods__["ChannelLowEnergy"] = _heasp.rmft_ChannelLowEnergy_set
    __swig_getmethods__["ChannelLowEnergy"] = _heasp.rmft_ChannelLowEnergy_get
    __swig_setmethods__["ChannelHighEnergy"] = _heasp.rmft_ChannelHighEnergy_set
    __swig_getmethods__["ChannelHighEnergy"] = _heasp.rmft_ChannelHighEnergy_get
    __swig_setmethods__["AreaScaling"] = _heasp.rmft_AreaScaling_set
    __swig_getmethods__["AreaScaling"] = _heasp.rmft_AreaScaling_get
    __swig_setmethods__["ResponseThreshold"] = _heasp.rmft_ResponseThreshold_set
    __swig_getmethods__["ResponseThreshold"] = _heasp.rmft_ResponseThreshold_get
    __swig_setmethods__["ChannelType"] = _heasp.rmft_ChannelType_set
    __swig_getmethods__["ChannelType"] = _heasp.rmft_ChannelType_get
    __swig_setmethods__["RMFVersion"] = _heasp.rmft_RMFVersion_set
    __swig_getmethods__["RMFVersion"] = _heasp.rmft_RMFVersion_get
    __swig_setmethods__["EBDVersion"] = _heasp.rmft_EBDVersion_set
    __swig_getmethods__["EBDVersion"] = _heasp.rmft_EBDVersion_get
    __swig_setmethods__["Telescope"] = _heasp.rmft_Telescope_set
    __swig_getmethods__["Telescope"] = _heasp.rmft_Telescope_get
    __swig_setmethods__["Instrument"] = _heasp.rmft_Instrument_set
    __swig_getmethods__["Instrument"] = _heasp.rmft_Instrument_get
    __swig_setmethods__["Detector"] = _heasp.rmft_Detector_set
    __swig_getmethods__["Detector"] = _heasp.rmft_Detector_get
    __swig_setmethods__["Filter"] = _heasp.rmft_Filter_set
    __swig_getmethods__["Filter"] = _heasp.rmft_Filter_get
    __swig_setmethods__["RMFType"] = _heasp.rmft_RMFType_set
    __swig_getmethods__["RMFType"] = _heasp.rmft_RMFType_get
    __swig_setmethods__["RMFExtensionName"] = _heasp.rmft_RMFExtensionName_set
    __swig_getmethods__["RMFExtensionName"] = _heasp.rmft_RMFExtensionName_get
    __swig_setmethods__["EBDExtensionName"] = _heasp.rmft_EBDExtensionName_set
    __swig_getmethods__["EBDExtensionName"] = _heasp.rmft_EBDExtensionName_get
    def __init__(self, *args): 
        this = apply(_heasp.new_rmft, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_rmft
    __del__ = lambda self : None;
    def load(*args): return apply(_heasp.rmft_load, args)
    def update(*args): return apply(_heasp.rmft_update, args)
    def NumberChannels(*args): return apply(_heasp.rmft_NumberChannels, args)
    def NumberEnergyBins(*args): return apply(_heasp.rmft_NumberEnergyBins, args)
    def NumberTotalGroups(*args): return apply(_heasp.rmft_NumberTotalGroups, args)
    def NumberTotalElements(*args): return apply(_heasp.rmft_NumberTotalElements, args)
    def ElementValue(*args): return apply(_heasp.rmft_ElementValue, args)
    def RowValues(*args): return apply(_heasp.rmft_RowValues, args)
    def disp(*args): return apply(_heasp.rmft_disp, args)
    def clear(*args): return apply(_heasp.rmft_clear, args)
rmft_swigregister = _heasp.rmft_swigregister
rmft_swigregister(rmft)

class arf:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, arf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, arf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LowEnergy"] = _heasp.arf_LowEnergy_set
    __swig_getmethods__["LowEnergy"] = _heasp.arf_LowEnergy_get
    __swig_setmethods__["HighEnergy"] = _heasp.arf_HighEnergy_set
    __swig_getmethods__["HighEnergy"] = _heasp.arf_HighEnergy_get
    __swig_setmethods__["EffArea"] = _heasp.arf_EffArea_set
    __swig_getmethods__["EffArea"] = _heasp.arf_EffArea_get
    __swig_setmethods__["Version"] = _heasp.arf_Version_set
    __swig_getmethods__["Version"] = _heasp.arf_Version_get
    __swig_setmethods__["Telescope"] = _heasp.arf_Telescope_set
    __swig_getmethods__["Telescope"] = _heasp.arf_Telescope_get
    __swig_setmethods__["Instrument"] = _heasp.arf_Instrument_set
    __swig_getmethods__["Instrument"] = _heasp.arf_Instrument_get
    __swig_setmethods__["Detector"] = _heasp.arf_Detector_set
    __swig_getmethods__["Detector"] = _heasp.arf_Detector_get
    __swig_setmethods__["Filter"] = _heasp.arf_Filter_set
    __swig_getmethods__["Filter"] = _heasp.arf_Filter_get
    __swig_setmethods__["ExtensionName"] = _heasp.arf_ExtensionName_set
    __swig_getmethods__["ExtensionName"] = _heasp.arf_ExtensionName_get
    def __init__(self, *args): 
        this = apply(_heasp.new_arf, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_arf
    __del__ = lambda self : None;
    def read(*args): return apply(_heasp.arf_read, args)
    def NumberEnergyBins(*args): return apply(_heasp.arf_NumberEnergyBins, args)
    def disp(*args): return apply(_heasp.arf_disp, args)
    def clear(*args): return apply(_heasp.arf_clear, args)
    def check(*args): return apply(_heasp.arf_check, args)
    def write(*args): return apply(_heasp.arf_write, args)
    def __iadd__(*args): return apply(_heasp.arf___iadd__, args)
    def checkCompatibility(*args): return apply(_heasp.arf_checkCompatibility, args)
arf_swigregister = _heasp.arf_swigregister
arf_swigregister(arf)

class arfII:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, arfII, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, arfII, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arfs"] = _heasp.arfII_arfs_set
    __swig_getmethods__["arfs"] = _heasp.arfII_arfs_get
    def __init__(self, *args): 
        this = apply(_heasp.new_arfII, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_arfII
    __del__ = lambda self : None;
    def read(*args): return apply(_heasp.arfII_read, args)
    def get(*args): return apply(_heasp.arfII_get, args)
    def push(*args): return apply(_heasp.arfII_push, args)
    def NumberARFs(*args): return apply(_heasp.arfII_NumberARFs, args)
    def disp(*args): return apply(_heasp.arfII_disp, args)
    def clear(*args): return apply(_heasp.arfII_clear, args)
    def check(*args): return apply(_heasp.arfII_check, args)
    def write(*args): return apply(_heasp.arfII_write, args)
arfII_swigregister = _heasp.arfII_swigregister
arfII_swigregister(arfII)

class grouping:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, grouping, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, grouping, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flag"] = _heasp.grouping_flag_set
    __swig_getmethods__["flag"] = _heasp.grouping_flag_get
    def __init__(self, *args): 
        this = apply(_heasp.new_grouping, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_grouping
    __del__ = lambda self : None;
    def disp(*args): return apply(_heasp.grouping_disp, args)
    def clear(*args): return apply(_heasp.grouping_clear, args)
    def read(*args): return apply(_heasp.grouping_read, args)
    def load(*args): return apply(_heasp.grouping_load, args)
    def newBin(*args): return apply(_heasp.grouping_newBin, args)
    def size(*args): return apply(_heasp.grouping_size, args)
grouping_swigregister = _heasp.grouping_swigregister
grouping_swigregister(grouping)

SumMode = _heasp.SumMode
SumQuadMode = _heasp.SumQuadMode
MeanMode = _heasp.MeanMode
FirstEltMode = _heasp.FirstEltMode
LastEltMode = _heasp.LastEltMode
ReadBinFactors = _heasp.ReadBinFactors
class tableParameter:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tableParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tableParameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Name"] = _heasp.tableParameter_Name_set
    __swig_getmethods__["Name"] = _heasp.tableParameter_Name_get
    __swig_setmethods__["InterpolationMethod"] = _heasp.tableParameter_InterpolationMethod_set
    __swig_getmethods__["InterpolationMethod"] = _heasp.tableParameter_InterpolationMethod_get
    __swig_setmethods__["InitialValue"] = _heasp.tableParameter_InitialValue_set
    __swig_getmethods__["InitialValue"] = _heasp.tableParameter_InitialValue_get
    __swig_setmethods__["Delta"] = _heasp.tableParameter_Delta_set
    __swig_getmethods__["Delta"] = _heasp.tableParameter_Delta_get
    __swig_setmethods__["Minimum"] = _heasp.tableParameter_Minimum_set
    __swig_getmethods__["Minimum"] = _heasp.tableParameter_Minimum_get
    __swig_setmethods__["Bottom"] = _heasp.tableParameter_Bottom_set
    __swig_getmethods__["Bottom"] = _heasp.tableParameter_Bottom_get
    __swig_setmethods__["Top"] = _heasp.tableParameter_Top_set
    __swig_getmethods__["Top"] = _heasp.tableParameter_Top_get
    __swig_setmethods__["Maximum"] = _heasp.tableParameter_Maximum_set
    __swig_getmethods__["Maximum"] = _heasp.tableParameter_Maximum_get
    __swig_setmethods__["TabulatedValues"] = _heasp.tableParameter_TabulatedValues_set
    __swig_getmethods__["TabulatedValues"] = _heasp.tableParameter_TabulatedValues_get
    def __init__(self, *args): 
        this = apply(_heasp.new_tableParameter, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_tableParameter
    __del__ = lambda self : None;
    def disp(*args): return apply(_heasp.tableParameter_disp, args)
    def clear(*args): return apply(_heasp.tableParameter_clear, args)
tableParameter_swigregister = _heasp.tableParameter_swigregister
tableParameter_swigregister(tableParameter)

class tableSpectrum:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tableSpectrum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tableSpectrum, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Flux"] = _heasp.tableSpectrum_Flux_set
    __swig_getmethods__["Flux"] = _heasp.tableSpectrum_Flux_get
    __swig_setmethods__["ParameterValues"] = _heasp.tableSpectrum_ParameterValues_set
    __swig_getmethods__["ParameterValues"] = _heasp.tableSpectrum_ParameterValues_get
    __swig_setmethods__["addFlux"] = _heasp.tableSpectrum_addFlux_set
    __swig_getmethods__["addFlux"] = _heasp.tableSpectrum_addFlux_get
    def __init__(self, *args): 
        this = apply(_heasp.new_tableSpectrum, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_tableSpectrum
    __del__ = lambda self : None;
    def pushaddFlux(*args): return apply(_heasp.tableSpectrum_pushaddFlux, args)
    def getaddFlux(*args): return apply(_heasp.tableSpectrum_getaddFlux, args)
    def disp(*args): return apply(_heasp.tableSpectrum_disp, args)
    def clear(*args): return apply(_heasp.tableSpectrum_clear, args)
tableSpectrum_swigregister = _heasp.tableSpectrum_swigregister
tableSpectrum_swigregister(tableSpectrum)

class table:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, table, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Parameters"] = _heasp.table_Parameters_set
    __swig_getmethods__["Parameters"] = _heasp.table_Parameters_get
    __swig_setmethods__["Spectra"] = _heasp.table_Spectra_set
    __swig_getmethods__["Spectra"] = _heasp.table_Spectra_get
    __swig_setmethods__["ModelName"] = _heasp.table_ModelName_set
    __swig_getmethods__["ModelName"] = _heasp.table_ModelName_get
    __swig_setmethods__["ModelUnits"] = _heasp.table_ModelUnits_set
    __swig_getmethods__["ModelUnits"] = _heasp.table_ModelUnits_get
    __swig_setmethods__["NumIntParams"] = _heasp.table_NumIntParams_set
    __swig_getmethods__["NumIntParams"] = _heasp.table_NumIntParams_get
    __swig_setmethods__["NumAddParams"] = _heasp.table_NumAddParams_set
    __swig_getmethods__["NumAddParams"] = _heasp.table_NumAddParams_get
    __swig_setmethods__["isError"] = _heasp.table_isError_set
    __swig_getmethods__["isError"] = _heasp.table_isError_get
    __swig_setmethods__["isRedshift"] = _heasp.table_isRedshift_set
    __swig_getmethods__["isRedshift"] = _heasp.table_isRedshift_get
    __swig_setmethods__["isAdditive"] = _heasp.table_isAdditive_set
    __swig_getmethods__["isAdditive"] = _heasp.table_isAdditive_get
    __swig_setmethods__["Energies"] = _heasp.table_Energies_set
    __swig_getmethods__["Energies"] = _heasp.table_Energies_get
    def __init__(self, *args): 
        this = apply(_heasp.new_table, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_table
    __del__ = lambda self : None;
    def pushParameter(*args): return apply(_heasp.table_pushParameter, args)
    def pushSpectrum(*args): return apply(_heasp.table_pushSpectrum, args)
    def getParameter(*args): return apply(_heasp.table_getParameter, args)
    def getSpectrum(*args): return apply(_heasp.table_getSpectrum, args)
    def disp(*args): return apply(_heasp.table_disp, args)
    def clear(*args): return apply(_heasp.table_clear, args)
    def check(*args): return apply(_heasp.table_check, args)
    def write(*args): return apply(_heasp.table_write, args)
table_swigregister = _heasp.table_swigregister
table_swigregister(table)



