/**
 * @file Primack05.cxx
 * @brief Implementation for Primack, Bullock, Somerville (2005) 
 * astro-ph 0502177 EBL model, using data arrays from Liz Hays/Luis Reyes
 * code.
 *
 * @author J. Chiang
 *
 * $Header: /glast/ScienceTools/glast/celestialSources/eblAtten/src/Primack05.cxx,v 1.1.1.2 2011/03/20 19:24:56 elwinter Exp $
 */

#include <algorithm>
#include <vector>

#include "Primack05.h"

namespace {
   size_t findIndex(float target, const std::vector<float> & values) {
      if (target >= values.back()) {
         return values.size() - 2;
      } else if (target <= values.front()) {
         return 0;
      }
      return (std::upper_bound(values.begin(), values.end(), target)
              - values.begin() - 1);
   }
}

namespace IRB {

Primack05 * Primack05::s_instance(0);

Primack05::Primack05() {
   float zvalue[17] = {0., 0.1, 0.25, 0.5, 1., 1.5, 2., 2.5, 3., 3.5, 
                       4., 4.5, 5., 5.5, 6., 6.5, 7.};
   m_zvalue = std::vector<float>(zvalue, zvalue + 17);
   
   float evalue[40]={2., 2.488, 3.0950, 3.8510, 4.7910, 5.9600, 7.4150, 
                     9.2250, 1.1480e+1, 1.4280e+1, 1.7760e+1, 2.2100e+1, 
                     2.7490e+1, 3.4200e+1, 4.2550e+1, 5.2930e+1, 6.5850e+1, 
                     8.1920e+1, 1.0190e+2, 1.2680e+2, 1.5770e+2, 1.9620e+2,
                     2.4410e+2, 3.0370e+2, 3.78e+2, 4.70e+2, 5.85e+2, 
                     7.28e+2, 9.05e+2, 1.13e+3, 1.40e+3, 1.74e+3, 2.17e+3,
                     2.70e+3, 3.36e+3, 4.18e+3, 5.19e+3, 6.46e+3, 8.04e+3,
                     1.00e+4};
   m_evalue = std::vector<float>(evalue, evalue + 40);

   fillTauTables();
}

Primack05 & Primack05::instance() {
   if (s_instance == 0) {
      s_instance = new Primack05();
   }
   return *s_instance;
}

float Primack05::value(float energy, float redshift) const {
   if (energy < m_evalue.front()) {
      return 0;
   }

   size_t eindex(findIndex(energy, m_evalue));

   size_t zindex(findIndex(redshift, m_zvalue));

// Replicate the calculation from the earlier version of
// IRB::calcPrimack05 in IRB_routines.cxx. This is not optimal, but
// need to do so to ensure backwards compatibility/consistency.  The
// logic is modified slightly.

   float tau1, tau2;
   float tauValue;

   if (eindex < m_tauTables.at(zindex).size() - 1) {
      tau1 = ( (energy - m_evalue.at(eindex))
               /(m_evalue.at(eindex+1) - m_evalue.at(eindex))
               *(m_tauTables.at(zindex).at(eindex+1) 
                 - m_tauTables.at(zindex).at(eindex))
               + m_tauTables.at(zindex).at(eindex) );
   } else {
      tau1 = m_tauTables.at(zindex).back();
   }

   if (zindex < m_zvalue.size() - 1) {
      if (eindex < m_tauTables.at(zindex+1).size() - 1) {
         tau2 = ( (energy - m_evalue.at(eindex))
                  /(m_evalue.at(eindex+1) - m_evalue.at(eindex))
                  *(m_tauTables.at(zindex+1).at(eindex+1) 
                    - m_tauTables.at(zindex+1).at(eindex))
                  + m_tauTables.at(zindex+1).at(eindex) );
      } else {
         tau2 = m_tauTables.at(zindex+1).back();
      }
      
      tauValue = ( (redshift - m_zvalue.at(zindex)) 
                   /(m_zvalue.at(zindex+1) - m_zvalue.at(zindex))
                   *(tau2 - tau1) + tau1 );
   } else {
      tauValue = tau1;
   }
   return tauValue;
}

void Primack05::fillTauTables() {
   m_tauTables.clear();

   float tau0[1] = {0};
   m_tauTables.push_back(std::vector<float>(tau0, tau0 + 1));

   float tau01[40] = {0., 0.0000001, 0.0000003, 0.0000008, 0.0000019, 
                      0.0000042, 0.0000099, 0.0000238, 0.0000552, 0.0001199,
                      0.0002443, 0.0004892, 0.0010674, 0.0024132, 0.0050824, 
                      0.0096015, 0.0163697, 0.0256939, 0.0380436, 0.0546355,
                      0.0777303, 0.1105819, 0.1570698, 0.2208418, 0.3037539,
                      0.4054053, 0.5221997, 0.6465960, 0.7691562, 0.8799724, 
                      0.9709822, 1.0396483, 1.0923208, 1.1416358, 1.2064721, 
                      1.3020910, 1.4366617, 1.6201703, 1.8610741, 2.1794928};
   m_tauTables.push_back(std::vector<float>(tau01, tau01 + 40));

   float tau025[40] = {0.0000001, 0.0000005, 0.0000014, 0.0000035, 0.0000076,
                       0.0000171, 0.0000407, 0.0000968, 0.0002186, 0.0004617,
                       0.0009238, 0.0019085, 0.0042851, 0.0094652, 0.0190260, 
                       0.0342809, 0.0560866, 0.0850821, 0.1230088, 0.1742253,
                       0.2459901, 0.3477387, 0.4895209, 0.6785036, 0.9165204,
                       1.1991670, 1.5127269, 1.8345708, 2.1389193, 2.4018006,
                       2.6075906, 2.7604884, 2.8892735, 3.0378014, 3.2507707, 
                       3.5584134, 3.9840049, 4.5473202, 5.2793418, 6.2633874};
   m_tauTables.push_back(std::vector<float>(tau025, tau025 + 40));

   float tau05[40] = {0.0000010, 0.0000029, 0.0000067, 0.0000144, 0.0000312,
                      0.0000731, 0.0001749, 0.0004026, 0.0008668, 0.0017518,
                      0.0035597, 0.0078349, 0.0174737, 0.0360969, 0.0669131,
                      0.1117945, 0.1714340, 0.2479820, 0.3487295, 0.4873202,
                      0.6822443, 0.9530774, 1.3148751, 1.7737483, 2.3246879,
                      2.9468168, 3.6000372, 4.2326759, 4.7939800, 5.2462781,
                      5.5866135, 5.8646962, 6.1662335, 6.5838559, 7.1977531, 
                      8.0583552, 9.1996407, 10.6771777, 12.6293777,15.4169639};
   m_tauTables.push_back(std::vector<float>(tau05, tau05 + 40));

   float tau10[35] = {0.0000092, 0.0000193, 0.0000395, 0.0000864, 0.0002063,
                      0.0004962, 0.0011276, 0.0023725, 0.0047253, 0.0097697,
                      0.0218142, 0.0480538, 0.0964923, 0.1726325, 0.2780015,
                      0.4126927, 0.5828524, 0.8065691, 1.1128001, 1.5344083,
                      2.1009211, 2.8323235, 3.7352715, 4.7970329, 5.9754211,
                      7.1966803, 8.3668533, 9.3951736, 10.2286613, 10.8944157,
                      11.5071431, 12.2380499,13.2666033,14.7188514,16.6776653};
   m_tauTables.push_back(std::vector<float>(tau10, tau10 + 35));

   float tau15[30] = {0.0000289, 0.0000579, 0.0001275, 0.0003103, 0.0007540,
                      0.0017071, 0.0035602, 0.0070077, 0.0144907, 0.0327386,
                      0.0725108, 0.1446813, 0.2558033, 0.4069964, 0.5984519, 
                      0.8400723, 1.1570757, 1.5847601, 2.1601107, 2.9160698, 
                      3.8756493, 5.0484552, 6.4230870, 7.9519874, 9.5477112, 
                      11.0982863, 12.4918875,13.6635642,14.6535502,15.6091534};
   m_tauTables.push_back(std::vector<float>(tau15, tau15 + 30));

   float tau20[27] = {0.0000625, 0.0001368, 0.0003343, 0.0008154, 0.0018518,
                      0.0038687, 0.0076352, 0.0157515, 0.0356483, 0.0792690,
                      0.1589536, 0.2827625, 0.4531616, 0.6713563, 0.9477445,
                      1.3074161, 1.7843432, 2.4149232, 3.2333568, 4.2665894,
                      5.5296426, 7.0184022, 8.6950112, 10.4807643, 12.2666076,
                      13.9356198, 15.4071088};
   m_tauTables.push_back(std::vector<float>(tau20, tau20 + 27));

   float tau25[26] = {0.0001093, 0.0002630, 0.0006461, 0.0014943, 0.0031830,
                      0.0063392, 0.0128773, 0.0287818, 0.0647205, 0.1332950,
                      0.2447116, 0.4043603, 0.6147429, 0.8837033, 1.2308171,
                      1.6848746, 2.2793325, 3.0487025, 4.0236373, 5.2262532, 
                      6.6640363, 8.3175392, 10.1311691, 12.0153741, 13.8593746,
                      15.5607761};
   m_tauTables.push_back(std::vector<float>(tau25, tau25 + 26));

   float tau30[25] = {0.0002166, 0.0005354, 0.0012768, 0.0028085, 0.0057098,
                      0.0112874, 0.0242226, 0.0548200, 0.1172134, 0.2248061,
                      0.3857926, 0.6030031, 0.8803797, 1.2328916, 1.6865156,
                      2.2734022, 3.0271987, 3.9793934, 5.1548374, 6.5690724,
                      8.2179971, 10.0657856, 12.0419091,14.0464631,15.9680728};
   m_tauTables.push_back(std::vector<float>(tau30, tau30 + 25));

   float tau35[23] = {0.0005791, 0.0013993, 0.0031327, 0.0064560, 0.0127024, 
                      0.0264943, 0.0592172, 0.1280992, 0.2507395, 0.4384755,
                      0.6944182, 1.0198036, 1.4263889, 1.9406097, 2.5965219, 
                      3.4284109, 4.4663397, 5.7331447, 7.2439184, 8.9999333,
                      10.9746883, 13.1074494, 15.3066731};
   m_tauTables.push_back(std::vector<float>(tau35, tau35 + 23));

   float tau40[22] = {0.0015020, 0.0033793, 0.0070182, 0.0138902, 0.0289108,
                      0.0638794, 0.1374250, 0.2702333, 0.4775225, 0.7651981,
                      1.1348334, 1.5962845, 2.1734261, 2.9008888, 3.8146649,
                      4.9450719, 6.3128560, 7.9304825, 9.7980313, 11.8928097,
                      14.1623445, 16.5244052};
   m_tauTables.push_back(std::vector<float>(tau40, tau40 + 22));

   float tau45[20] = {0.0034667, 0.0072649, 0.0144116, 0.0297863, 0.0657044,
                      0.1418342, 0.2810762, 0.5021846, 0.8146987, 1.2220693,
                      1.7341971, 2.3738843, 3.1743106, 4.1729259, 5.4022331,
                      6.8829534, 8.6250875, 10.6260443, 12.8610481,15.2794450};
   m_tauTables.push_back(std::vector<float>(tau45, tau45 + 20));

   float tau50[19] = {0.0071092, 0.0141624, 0.0288313, 0.0632518, 0.1382215,
                      0.2787677, 0.5066919, 0.8348414, 1.2687125, 1.8185965,
                      2.5079854, 3.3704304, 4.4431075, 5.7607600, 7.3463606,
                      9.2094083, 11.3455301, 13.7276341, 16.3016469};
   m_tauTables.push_back(std::vector<float>(tau50, tau50 + 19));

   float tau55[18] = {0.0132880, 0.0265899, 0.0574533, 0.1270139, 0.2628803,
                      0.4906496, 0.8268285, 1.2789404, 1.8567263, 2.5842328,
                      3.4973174, 4.6354043, 6.0346728, 7.7216602, 9.7080199,
                      11.9896983, 14.5392316, 17.2989585};
   m_tauTables.push_back(std::vector<float>(tau55, tau55 + 18));

   float tau60[16] = {0.0235960, 0.0496899, 0.1103218, 0.2348820, 0.4537640, 
                      0.7883757, 1.2486188, 1.8424744, 2.5923866, 3.5366242, 
                      4.7194613, 6.1811159, 7.9511663, 10.0444068, 12.4598110, 
                      15.1731650};
   m_tauTables.push_back(std::vector<float>(tau60, tau60 + 16));

   float tau65[15] = {0.0414492, 0.0911960, 0.1991044, 0.3999018, 0.7218841,
                      1.1796636, 1.7796795, 2.5393540, 3.4965811, 4.7009047,
                      6.2001010, 8.0305576, 10.2107500, 12.7428649,15.6087370};
   m_tauTables.push_back(std::vector<float>(tau65, tau65 + 15));

   float tau70[14] = {0.0724103, 0.1605235, 0.3354485, 0.6327967, 1.0749973, 
                      1.6703149, 2.4294342, 3.3849692, 4.5888035, 6.0974870,
                      7.9579857, 10.1977161, 12.8222616, 15.8189200};
   m_tauTables.push_back(std::vector<float>(tau70, tau70 + 14));
}

} // namespace IRB 
