#!/usr/bin/env python

# $Id: ST-AGN-thread-test,v 1.13.6.5 2015/05/01 03:39:01 jasercio Exp $

# Program to run Fermi Science Tools unit tests.

#******************************************************************************

# Import external modules.

# Standard modules
from optparse import OptionParser
from os import environ, mkdir, sep, times
from os.path import exists
from platform import node
from subprocess import CalledProcessError, STDOUT, check_call
import sys

# Third-party modules

# Project modules

#******************************************************************************

# Constants

# Defaults for program parameters.

# Other program constants.

# Name of log file for tests.
logFile = "ST-AGN-thread-test.log"

# Path to reference data.
refdata_path = sep.join([environ["FERMI_DIR"], "refdata", "fermi"])

# Path to test script data.
test_data_path = sep.join([refdata_path, "test-scripts"])

# Path to test script output reference data.
test_outref_path = sep.join([test_data_path, "outref"])

# Path to test output data.
test_output_path = sep.join([".", "output"])

# Constants to specify status codes for test pass and fail.
OK = 0
FAIL = 1

#******************************************************************************

# Utility functions for unit tests.
    
# Check a list of files for existence. If one or more are not found,
# return FAIL. Otherwise, return OK.
def exists_mass(files):
    status = OK
    for f in files:
        print "Checking for file %s ..." % f,
        if exists(f):
            print "found."
        else:
            print "not found!"
            status = FAIL
    return status

#------------------------------------------------------------------------------

# Compare 2 binary files using cmp. Return OK on success (cmp returns
# 0), or the exit code from cmp if non-zero.
def cmp(f1, f2, *args):
    status = OK
    cmd = "cmp"
    for arg in args:
        cmd += " %s" % arg
    cmd += " %s %s" % (f1, f2)
    try:
        check_call(cmd, shell = True, stdout = sys.stdout, stderr = STDOUT)
    except CalledProcessError, e:
        status = e.returncode
    return status

# Run cmp on a set of files, with reference versions in path
# outref. If one or more files fails the comparison, return
# FAIL. Otherwise, return OK.
def cmp_mass(files, outref):
    status = OK
    for f in files:
        f1 = f
        f2 = sep.join([outref, f])
        print "Using cmp to compare %s to %s ..." % (f1, f2),
        s = cmp(f1, f2, *files[f])
        if s == OK:
            print "passed."
        else:
            print "failed!"
            status = FAIL
    return status

#------------------------------------------------------------------------------

# Compare 2 text files using diff, Return OK on success (diff returns
# 0), or the exit code from diff if non-zero.
def diff(f1, f2, *args):
    status = OK
    cmd = "diff"
    for arg in args:
        cmd += " %s" % arg
    cmd += " %s %s" % (f1, f2)
    try:
        check_call(cmd, shell = True, stdout = sys.stdout, stderr = STDOUT)
    except CalledProcessError, e:
        status = e.returncode
    return status

# Run diff on a set of files, with reference versions in outref. If
# one or more files fails the comparison, return FAIL. Otherwise,
# return OK.
def diff_mass(files, outref):
    status = OK
    for f in files:
        f1 = f
        f2 = sep.join([outref, f])
        s = diff(f1, f2, *files[f])
        print "Using diff to compare %s to %s ..." % (f1, f2),
        if s == OK:
            print "passed."
        else:
            print "failed!"
            status = FAIL
    return status

#------------------------------------------------------------------------------

# Compare 2 FITS files using ftdiff. Return OK on success (ftdiff
# returns 0), or the exit code from ftdiff if non-zero.
def ftdiff(f1, f2, **kwargs):
    status = OK
    cmd = "ftdiff chatter=0 %s %s" % (f1, f2)
    for (kw, val) in kwargs.items():
        if val != "":
            cmd += " " + "=".join([kw, val])
        else:
            cmd += " " + kw
    try:
        check_call(cmd, shell = True, stdout = sys.stdout, stderr = STDOUT)
    except CalledProcessError, e:
        status = e.returncode
    return status

# Run ftdiff on a set of files, with reference versions in outref. If
# one or more files fails the comparison, return FAIL. Otherwise,
# return OK.
def ftdiff_mass(fitsFiles, outref):
    status = OK
    for f in fitsFiles:
        f1 = f
        f2 = sep.join([outref, f])
        print "Using ftdiff to compare %s to %s ..." % (f1, f2),
        s = ftdiff(f1, f2, **fitsFiles[f])
        if s == OK:
            print "passed."
        else:
            print "failed!"
            status = FAIL
    return status

#------------------------------------------------------------------------------

# Individual test functions
def check_environment():
    status = OK
    environmentVariableNames = [ "HEADAS", "FERMI_DIR" ]
    for ev in environmentVariableNames:
        print "Checking if environment variable %s is set ..." % ev,
        try:
            val = environ[ev]
            print "yes, value is:", val
        except KeyError, e:
            print "no!"
            status = FAIL
    return status

def test_gtselect():
    status = OK
    infile = sep.join([test_data_path, "3C84-P7REP-FT1.fits"])
    outfile = "3C84-photons.fits"
    ra = "49.9507"
    dec = "41.5117"
    rad = "10"
    tmin = "268185604"
    tmax = "268617603"
    emin = "100"
    emax = "100000"
    zmax = "90"
    evclass = "2"
#    evclsmin = "3"
#    evclsmax = "3"
#    convtype = "-1"
    phasemin = "0"
    phasemax = "1"
    evtable = "EVENTS"
    chatter = "0"
    clobber = "yes"
    debug = "no"
    gui = "no"
    mode = "h"
    cmdTemplate = "gtselect infile='%s' outfile='%s' ra='%s' dec='%s' " + \
                  "rad='%s' tmin='%s' tmax='%s' emin='%s' emax='%s' " + \
                  "zmax='%s' evclass='%s' " + \
                  "phasemin='%s' phasemax='%s' evtable='%s' chatter='%s' " + \
                  "clobber='%s' debug='%s' gui='%s' mode='%s'"
    cmd = cmdTemplate % (infile, outfile, ra, dec, rad, tmin, tmax, emin, emax,
                         zmax, evclass, phasemin,
                         phasemax, evtable, chatter, clobber, debug, gui, mode)
    try:
        check_call(cmd, shell = True, stdout = sys.stdout, stderr = STDOUT)
    except CalledProcessError, e:
        status = e.returncode
    return status

def check_gtselect_output():
    status = OK
    outref = sep.join([refdata_path, "test-scripts", "outref"])
    fitsFiles = {
        "3C84-photons.fits" : [],
        }
    if exists_mass(fitsFiles.keys()) != OK:
        status = FAIL
    f1 = "3C84-photons.fits"
    f2 = sep.join([test_outref_path, "3C84-photons-outref.fits"])
    if ftdiff(f1, f2, exclude = 'CREATOR,DATASUM') != OK:
        status = FAIL
    return status

def test_gtbin():
    status = OK
    evfile = "3C84-photons.fits"
    scfile = sep.join([test_data_path, "3C84-FT2.fits"])
    outfile = "3C84-cmap.fits"
    algorithm = "CMAP"
    ebinalg = "LOG"
    emin = "100"
    emax = "100000"
    enumbins = "20"
    denergy = "0"
    ebinfile = "NONE"
    nxpix = "300"
    nypix = "300"
    binsz = "0.1"
    coordsys = "CEL"
    xref = "49.9507"
    yref = "41.5117"
    axisrot = "0"
    rafield = "RA"
    decfield = "DEC"
    proj = "STG"
    evtable = "EVENTS"
    sctable = "SC_DATA"
    efield = "ENERGY"
    tfield = "TIME"
    chatter = "0"
    clobber = "yes"
    debug = "no"
    gui = "no"
    mode = "h"
    cmdTemplate = "gtbin evfile='%s' scfile='%s' outfile='%s' " + \
                  "algorithm='%s' ebinalg='%s' emin='%s' emax='%s' " + \
                  "enumbins='%s' denergy='%s' ebinfile='%s' nxpix='%s' " + \
                  "nypix='%s' binsz='%s' coordsys='%s' xref='%s' yref='%s' " +\
                  "axisrot='%s' rafield='%s' decfield='%s' proj='%s' " + \
                  "evtable='%s' sctable='%s' efield='%s' tfield='%s' " + \
                  "chatter='%s' clobber='%s' debug='%s' gui='%s' mode='%s'"
    cmd = cmdTemplate % (evfile, scfile, outfile, algorithm, ebinalg, emin,
                         emax, enumbins, denergy, ebinfile, nxpix, nypix,
                         binsz, coordsys, xref, yref, axisrot, rafield,
                         decfield, proj, evtable, sctable, efield, tfield,
                         chatter, clobber, debug, gui, mode)
    try:
        check_call(cmd, shell = True, stdout = sys.stdout, stderr = STDOUT)
    except CalledProcessError, e:
        status = e.returncode
    return status

def check_gtbin_output():
    status = OK
    outref = sep.join([refdata_path, "test-scripts", "outref"])
    fitsFiles = {
        "3C84-cmap.fits" : [],
        }
    if exists_mass(fitsFiles.keys()) != OK:
        status = FAIL
    f1 = "3C84-cmap.fits"
    f2 = sep.join([test_outref_path, "3C84-cmap-outref.fits"])
    if ftdiff(f1, f2, exclude = "CREATOR,DATASUM") != OK:
        status = FAIL
    return status

def test_gtltcube():
    status = OK
    evfile = "3C84-photons.fits"
    evtable = "EVENTS"
    scfile = sep.join([test_data_path, "3C84-FT2.fits"])
    sctable = "SC_DATA"
    outfile = "3C84-expcube.fits"
    dcostheta = "0.099"
    binsz = "1"
    phibins = "0"
    tmin = "268185604"
    tmax = "268617603"
    file_version = "1"
    zmax = "90"
    chatter = "0"
    clobber = "yes"
    debug = "no"
    gui = "no"
    mode = "h"
    cmdTemplate = "gtltcube evfile='%s' evtable='%s' scfile='%s' " + \
                  "sctable='%s' outfile='%s' dcostheta='%s' binsz='%s' " + \
                  "phibins='%s' tmin='%s' tmax='%s' file_version='%s' " + \
                  "zmax='%s' chatter='%s' clobber='%s' debug='%s' gui='%s' " +\
                  "mode='%s'"
    cmd = cmdTemplate % (evfile, evtable, scfile, sctable, outfile, dcostheta,
                         binsz, phibins, tmin, tmax, file_version, zmax,
                         chatter, clobber, debug, gui, mode)
    try:
        check_call(cmd, shell = True, stdout = sys.stdout, stderr = STDOUT)
    except CalledProcessError, e:
        status = e.returncode
    return status

def check_gtltcube_output():
    status = OK
    outref = sep.join([refdata_path, "test-scripts", "outref"])
    fitsFiles = {
        "3C84-expcube.fits" : [],
        }
    if exists_mass(fitsFiles.keys()) != OK:
        status = FAIL
    f1 = "3C84-expcube.fits"
    f2 = sep.join([test_outref_path, "3C84-expcube-outref.fits"])
    if ftdiff(f1, f2, exclude = "CREATOR,DATASUM", tol = "1e-18") != OK:
        status = FAIL
    return status

def test_gtexpmap():
    status = OK
    evfile = "3C84-photons.fits"
    evtable = "EVENTS"
    scfile = sep.join([test_data_path, "3C84-FT2.fits"])
    sctable = "SC_DATA"
    expcube = "3C84-expcube.fits"
    outfile = "3C84-expmap.fits"
    irfs = "P7REP_SOURCE_V15"
    srcrad = "20"
    nlong = "80"
    nlat = "80"
    nenergies = "20"
    submap = "no"
    nlongmin = "0"
    nlongmax = "0"
    nlatmin = "0"
    nlatmax = "0"
    chatter = "0"
    clobber = "yes"
    debug = "no"
    gui = "no"
    mode = "h"
    cmdTemplate = "gtexpmap evfile='%s' evtable='%s' scfile='%s' " + \
                  "sctable='%s' expcube='%s' outfile='%s' irfs='%s' " + \
                  "srcrad='%s' nlong='%s' nlat='%s' " + \
                  "nenergies='%s' submap='%s' nlongmin='%s' nlongmax='%s' " + \
                  "nlatmin='%s' nlatmax='%s' chatter='%s' clobber='%s' " + \
                  "debug='%s' gui='%s' mode='%s'"
    cmd = cmdTemplate % (evfile, evtable, scfile, sctable, expcube, outfile,
                         irfs, srcrad, nlong, nlat, nenergies, submap,
                         nlongmin, nlongmax, nlatmin, nlatmax, chatter,
                         clobber, debug, gui, mode)
    try:
        check_call(cmd, shell = True, stdout = sys.stdout, stderr = STDOUT)
    except CalledProcessError, e:
        status = e.returncode
    return status

def check_gtexpmap_output():
    status = OK
    outref = sep.join([refdata_path, "test-scripts", "outref"])
    fitsFiles = {
        "3C84-expmap.fits" : [],
        }
    if exists_mass(fitsFiles.keys()) != OK:
        status = FAIL
    f1 = "3C84-expmap.fits"
    f2 = sep.join([test_outref_path, "3C84-expmap-outref.fits"])
    if ftdiff(f1, f2, reltol = "1e-6", exclude = "CREATOR,DATASUM") != OK:
        status = FAIL
    return status

def test_gtlike():
    status = OK
    irfs = "P7REP_SOURCE_V15"
    expcube = "3C84-expcube.fits"
    srcmdl = sep.join([test_data_path, "3C84-model.xml"])
    sfile = "none"
    check_fit = "yes"
    results = "3C84-results.dat"
    specfile = "3C84-counts_spectra.fits"
    statistic = "UNBINNED"
    optimizer = "DRMNFB"
    ftol = "1e-2"
    toltype = "ABS"
    tsmin = "no"
    save = "yes"
    refit = "no"
    evfile = "3C84-photons.fits"
    evtable = "EVENTS"
    scfile = sep.join([test_data_path, "3C84-FT2.fits"])
    sctable = "SC_DATA"
    expmap = "3C84-expmap.fits"
    plot = "no"
    cmap = "NONE"
    bexpmap = "NONE"
    psfcorr = "yes"
    chatter = "0"
    clobber = "yes"
    debug = "no"
    gui = "no"
    mode = "h"
    cmdTemplate = "gtlike expcube='%s' srcmdl='%s' sfile='%s' " + \
                  "check_fit='%s' results='%s' specfile='%s' " + \
                  "statistic='%s' optimizer='%s' ftol='%s' toltype='%s' " + \
                  "tsmin='%s' save='%s' refit='%s' evfile='%s' " + \
                  "evtable='%s' scfile='%s' sctable='%s' expmap='%s' " + \
                  "plot='%s' cmap='%s' bexpmap='%s' psfcorr='%s' " + \
                  "chatter='%s' clobber='%s' debug='%s' gui='%s' mode='%s' " +\
                  "irfs='%s'"
    cmd = cmdTemplate % (expcube, srcmdl, sfile, check_fit, results, specfile,
                         statistic, optimizer, ftol, toltype, tsmin, save,
                         refit, evfile, evtable, scfile, sctable, expmap,
                         plot, cmap, bexpmap, psfcorr, chatter, clobber,
                         debug, gui, mode, irfs)
    try:
        check_call(cmd, shell = True, stdout = sys.stdout, stderr = STDOUT)
    except CalledProcessError, e:
        status = e.returncode
    return status

def check_gtlike_output():
    status = OK
    outref = sep.join([refdata_path, "test-scripts", "outref"])
    files = {
        "3C84-results.dat" : [],
        }
    if exists_mass(files.keys()) != OK:
        status = FAIL
    fitsFiles = {
        "3C84-counts_spectra.fits" : {},
        }
    if exists_mass(fitsFiles.keys()) != OK:
        status = FAIL
    f1 = "3C84-counts_spectra.fits"
    f2 = sep.join([test_outref_path, "3C84-counts_spectra-outref.fits"])
    if ftdiff(f1, f2, reltol = "1e-1", exclude = "DATASUM") != OK:
        status = FAIL
    return status

# List of thread tests to run when ROOT is available. The "cmd" entry
# should contain the complete invocation string for a command to run
# on the command line, or the name of a function to be invoked. Either
# should return 0 on success, or non-0 on failure. The standard output
# and standard error of the test will be saved in the output log for
# this script.

threadTestsWithRoot = [
    { "cmd"  : check_environment,
      "name" : "Checking environment variables" },
    { "cmd"  : test_gtselect,
      "name" : "gtselect" },
    { "cmd"  : check_gtselect_output,
      "name" : "gtselect: Check output" },
    { "cmd"  : test_gtbin,
      "name" : "gtbin" },
    { "cmd"  : check_gtbin_output,
      "name" : "gtbin: Check output" },
    { "cmd"  : test_gtltcube,
      "name" : "gtltcube" },
    { "cmd"  : check_gtltcube_output,
      "name" : "gtltcube: Check output" },
    { "cmd"  : test_gtexpmap,
      "name" : "gtexpmap" },
    { "cmd"  : check_gtexpmap_output,
      "name" : "gtexpmap: Check output" },
    { "cmd"  : test_gtlike,
      "name" : "gtlike" },
    { "cmd"  : check_gtlike_output,
      "name" : "gtlike: Check output" },
    ]

# List of thread tests to run when ROOT is not available. The "cmd"
# entry should contain the complete invocation string for a command to
# run on the command line, or the name of a function to be
# invoked. Either should return 0 on success, or non-0 on failure. The
# standard output and standard error of the test will be saved in the
# output log for this script.

threadTestsWithoutRoot = [
    { "cmd"  : check_environment,
      "name" : "Checking environment variables" },
    { "cmd"  : test_gtselect,
      "name" : "gtselect" },
    { "cmd"  : check_gtselect_output,
      "name" : "gtselect: Check output" },
    { "cmd"  : test_gtbin,
      "name" : "gtbin" },
    { "cmd"  : check_gtbin_output,
      "name" : "gtbin: Check output" },
    { "cmd"  : test_gtltcube,
      "name" : "gtltcube" },
    { "cmd"  : check_gtltcube_output,
      "name" : "gtltcube: Check output" },
    { "cmd"  : test_gtexpmap,
      "name" : "gtexpmap" },
    { "cmd"  : check_gtexpmap_output,
      "name" : "gtexpmap: Check output" },
    { "cmd"  : test_gtlike,
      "name" : "gtlike" },
    { "cmd"  : check_gtlike_output,
      "name" : "gtlike: Check output" },
    ]

#******************************************************************************

# Process the program command line to extract options and arguments.

def getCommandLineOptions():

    # Create the command line option parser.
    optionParser = OptionParser()

    # Specify allowed command-line options.
    optionParser.add_option("-d", "--debug", action = "store_true",
                            default = False,
                            help = "print debugging information")
    optionParser.add_option("-v", "--verbose", action = "store_true",
                            default = False,
                            help = "print verbose output")
    optionParser.add_option("-w", "--warn", action = "store_true",
                            default = False,
                            help = "print warning messages as needed")
    optionParser.add_option("", "--without-root", action = "store_true",
                            default = False,
                            help = "skip ROOT-dependent tests")

    # Parse the command-line options.
    (options, args) = optionParser.parse_args()

    # Return the options.
    return (options, args)

#******************************************************************************

# Use these globals to keep track of the number of the current test,
# starting at 1 (to be compatible with the Perl ok() function), and
# the number of passed and failed tests.
nTest = 0
nPass = 0
nFail = 0

# Run a test command. A test command can be a string (indicating a
# shell command), or a function object (indicating a Python
# function). Both should return 0 (defined as OK) on success, and
# non-0 on failure. In either case, stdout and stderr are redirected
# to the test log file for post-run analysis.

def run_test(cmd):
    global nTest

    # Open the test log to append the results from this test.
    f = open(logFile, "a", 0) # 0 means unbuffered
    f.write("*" * 80 + "\n")

    # Initialize the status to 0 (success).
    status = OK

    # If the test command is a string, it represents a shell
    # command. Otherwise, it is the name of a function to call.
    if type(cmd) == str:
        f.write("Test %d: shell command '%s'\n" % (nTest, cmd))
        try:
            check_call(cmd, shell = True, stdout = f, stderr = STDOUT)
        except CalledProcessError, e:
            status = e.returncode
    else:
        f.write("Test %d: function %s()\n" % (nTest, cmd.__name__))
        stdout_orig = sys.stdout # Should be console
        stderr_orig = sys.stderr # Should be console
        sys.stdout = f           # Send stdout to file
        sys.stderr = f           # Send stderr to file
        status = cmd()
        sys.stdout = stdout_orig # Back to console
        sys.stderr = stderr_orig # Back to console

    # Close the test log.
    f.close()

    # Return the test status.
    return status

#******************************************************************************

# Run a single unit test. If it succeeds (returns a value of 0), print
# the 'ok' message. Otherwise, print the 'not ok' message.

def ok(testCmd, testName):
    global nTest
    global nPass
    global nFail
    nTest += 1
    status = run_test(testCmd)
    if status == OK:
        print "ok %s - %s" % (nTest, testName)
        nPass += 1
    else:
        print "not ok %s - %s" % (nTest, testName)
        nFail += 1

#******************************************************************************

# Begin main program.
if __name__ == "__main__":

    # Process the command line.
    (options, args) = getCommandLineOptions()
    if options.debug:
        print "options = %s" % options
        print "args = %s" % args

    #--------------------------------------------------------------------------

    # Prepend the syspfiles directory from the ScienceTools
    # installatiomn toi the PFILES path.
    environ['PFILES'] = environ['FERMI_DIR'] + '/syspfiles' + ':' + \
                        environ['PFILES']

    # Make sure the test output directory exists.
    if not exists("./output"):
        mkdir("./output")

    # Fetch the test start time.
    tStart = times()[4]
    if options.debug: print "tStart = %s" % tStart

    # Run each thread test.
    if options.without_root == False:
        for threadTest in threadTestsWithRoot:
            ok(threadTest["cmd"], threadTest["name"])
    else:
        for threadTest in threadTestsWithoutRoot:
            ok(threadTest["cmd"], threadTest["name"])

    # Fetch the test stop time.
    tStop = times()[4]
    if options.debug: print "tStop = %s" % tStop

    # Compute the elapsed time for the tests.
    tElapsed = tStop - tStart
    if options.debug: print "tElapsed = %s" % tElapsed

    # Fetch the name of the testing machine.
    hostname = node()
    if options.debug: print "hostname = %s" % hostname

    # Print the test summary.
    print "Total run time: %s s on %s" % (tElapsed, hostname)
    print "1..%d" % nTest
    if nFail > 0:
        print "# Looks like you failed %d %s of %d" % \
              (nFail, "test" if nFail == 1 else "tests", nTest)
